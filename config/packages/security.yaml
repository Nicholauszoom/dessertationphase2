security:


    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        Symfony\Component\Security\Core\Technician\PasswordAuthenticatedUserInterface: 'auto'
        Symfony\Component\Security\Core\Admin\PasswordAuthenticatedUserInterface: 'auto'


     # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
       


        technicians:
            entity:
                class: App\Entity\Technician
                property: email
     
       
       
       
        user_provider:
            entity:
                class: App\Entity\User
                property: email


        admin:
            entity:
                class: App\Entity\Admin
                property: email
       

        # technician_provider:
        #     entity:
        #        class: App\Entity\Technician
        #        property: email

        all_users:
            chain:
                providers: ['user_provider', 'technicians','admin']    

              
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            # pattern: ^/admin
            # anonymous: true
            lazy: true
            provider: all_users

    
            # guard:
            #     authenticators:
            #         - App\Security\TechnicianAuthenticator




            
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:


         #  require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*

        - { path: ^/register, roles: ROLE_ADMIN }
        - { path: ^/users, roles: ROLE_ADMIN }
        - { path: ^/technician/, roles: ROLE_ADMIN }
        - { path: ^/technician/, roles: ROLE_ADMIN }
        # - { path: ^/task/, roles: ROLE_ADMIN }
        
        - { path: ^/building/, roles: ROLE_ADMIN }
        - { path: ^/infrastructure/, roles: ROLE_ADMIN }
        - { path: ^/Dashboard, roles: ROLE_ADMIN }
        - { path: ^/classroom/, roles: ROLE_ADMIN }

       

        
         # require ROLE_USER or IS_AUTHENTICATED_FULLY  FOR USER*

        - { path: ^('?!/login'), roles: ROLE_USER }
        - { path: ^('/UserDashboard'), roles: ROLE_USER }
        - { path: ^('/messages/'), roles: ROLE_USER }


         # require ROLE_TECHNICIAN or IS_AUTHENTICATED_FULLY  FOR TECHNICIAN*
        - { path: ^/technician/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^('/TechnDashboard'), roles: ROLE_TECHNICIAN }
        - { path: ^('/task/'), roles: ROLE_TECHNICIAN }


        
        






        # - { path: '^/', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }
        #   - { path: ^/register, roles: ROLE_ADMIN }
        # - { path: ^/movies/create, roles: ROLE_USER }
        # - { path: ^/movies/edit, roles: ROLE_USER}
        # - { path: ^/movies/delete, roles: ROLE_USER}
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

            Symfony\Component\Security\Core\Technician\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon


            Symfony\Component\Security\Core\Admin\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon



    # access_control:
    #     - { path: ^/customer/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/customer, roles: ROLE_CUSTOMER }
    #     - { path: ^/admin/login$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    #     - { path: ^/admin, roles: ROLE_ADMIN }